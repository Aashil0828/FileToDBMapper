// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileToDBMapperClient is the client API for FileToDBMapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileToDBMapperClient interface {
	CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*CreateMapResponse, error)
	GetMapDetailsByID(ctx context.Context, in *GetMapDetailsByIDRequest, opts ...grpc.CallOption) (*GetMapDetailsByIdResponse, error)
	GetMapDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMapDetailsResponse, error)
	UpdateMapDetails(ctx context.Context, in *UpdateMapDetailsRequest, opts ...grpc.CallOption) (*UpdateMapDetailsResponse, error)
	EnableDisableMap(ctx context.Context, in *EnableDisableMapRequest, opts ...grpc.CallOption) (*EnableDisableMapResponse, error)
	GetPreFilledMappings(ctx context.Context, in *GetPreFilledMappingsRequest, opts ...grpc.CallOption) (*GetPreFilledMappingsResponse, error)
	GetVinTemplateHeaders(ctx context.Context, in *GetVinTemplateHeadersRequest, opts ...grpc.CallOption) (*GetVinTemplateHeadersResponse, error)
	GetCustomerTemplateHeaders(ctx context.Context, in *GetCustomerTemplateHeadersRequest, opts ...grpc.CallOption) (*GetCustomerTemplateHeadersResponse, error)
	AddMappingsToMap(ctx context.Context, in *AddMappingsToMapRequest, opts ...grpc.CallOption) (*AddMappingsToMapResponse, error)
	RemoveMappingFromMap(ctx context.Context, in *RemoveMappingFromMapRequest, opts ...grpc.CallOption) (*RemoveMappingFromMapResponse, error)
}

type fileToDBMapperClient struct {
	cc grpc.ClientConnInterface
}

func NewFileToDBMapperClient(cc grpc.ClientConnInterface) FileToDBMapperClient {
	return &fileToDBMapperClient{cc}
}

func (c *fileToDBMapperClient) CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*CreateMapResponse, error) {
	out := new(CreateMapResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/CreateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) GetMapDetailsByID(ctx context.Context, in *GetMapDetailsByIDRequest, opts ...grpc.CallOption) (*GetMapDetailsByIdResponse, error) {
	out := new(GetMapDetailsByIdResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/GetMapDetailsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) GetMapDetails(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetMapDetailsResponse, error) {
	out := new(GetMapDetailsResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/GetMapDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) UpdateMapDetails(ctx context.Context, in *UpdateMapDetailsRequest, opts ...grpc.CallOption) (*UpdateMapDetailsResponse, error) {
	out := new(UpdateMapDetailsResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/UpdateMapDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) EnableDisableMap(ctx context.Context, in *EnableDisableMapRequest, opts ...grpc.CallOption) (*EnableDisableMapResponse, error) {
	out := new(EnableDisableMapResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/EnableDisableMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) GetPreFilledMappings(ctx context.Context, in *GetPreFilledMappingsRequest, opts ...grpc.CallOption) (*GetPreFilledMappingsResponse, error) {
	out := new(GetPreFilledMappingsResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/GetPreFilledMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) GetVinTemplateHeaders(ctx context.Context, in *GetVinTemplateHeadersRequest, opts ...grpc.CallOption) (*GetVinTemplateHeadersResponse, error) {
	out := new(GetVinTemplateHeadersResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/GetVinTemplateHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) GetCustomerTemplateHeaders(ctx context.Context, in *GetCustomerTemplateHeadersRequest, opts ...grpc.CallOption) (*GetCustomerTemplateHeadersResponse, error) {
	out := new(GetCustomerTemplateHeadersResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/GetCustomerTemplateHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) AddMappingsToMap(ctx context.Context, in *AddMappingsToMapRequest, opts ...grpc.CallOption) (*AddMappingsToMapResponse, error) {
	out := new(AddMappingsToMapResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/AddMappingsToMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileToDBMapperClient) RemoveMappingFromMap(ctx context.Context, in *RemoveMappingFromMapRequest, opts ...grpc.CallOption) (*RemoveMappingFromMapResponse, error) {
	out := new(RemoveMappingFromMapResponse)
	err := c.cc.Invoke(ctx, "/FileToDBMapper/RemoveMappingFromMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileToDBMapperServer is the server API for FileToDBMapper service.
// All implementations must embed UnimplementedFileToDBMapperServer
// for forward compatibility
type FileToDBMapperServer interface {
	CreateMap(context.Context, *CreateMapRequest) (*CreateMapResponse, error)
	GetMapDetailsByID(context.Context, *GetMapDetailsByIDRequest) (*GetMapDetailsByIdResponse, error)
	GetMapDetails(context.Context, *emptypb.Empty) (*GetMapDetailsResponse, error)
	UpdateMapDetails(context.Context, *UpdateMapDetailsRequest) (*UpdateMapDetailsResponse, error)
	EnableDisableMap(context.Context, *EnableDisableMapRequest) (*EnableDisableMapResponse, error)
	GetPreFilledMappings(context.Context, *GetPreFilledMappingsRequest) (*GetPreFilledMappingsResponse, error)
	GetVinTemplateHeaders(context.Context, *GetVinTemplateHeadersRequest) (*GetVinTemplateHeadersResponse, error)
	GetCustomerTemplateHeaders(context.Context, *GetCustomerTemplateHeadersRequest) (*GetCustomerTemplateHeadersResponse, error)
	AddMappingsToMap(context.Context, *AddMappingsToMapRequest) (*AddMappingsToMapResponse, error)
	RemoveMappingFromMap(context.Context, *RemoveMappingFromMapRequest) (*RemoveMappingFromMapResponse, error)
	mustEmbedUnimplementedFileToDBMapperServer()
}

// UnimplementedFileToDBMapperServer must be embedded to have forward compatible implementations.
type UnimplementedFileToDBMapperServer struct {
}

func (UnimplementedFileToDBMapperServer) CreateMap(context.Context, *CreateMapRequest) (*CreateMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMap not implemented")
}
func (UnimplementedFileToDBMapperServer) GetMapDetailsByID(context.Context, *GetMapDetailsByIDRequest) (*GetMapDetailsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapDetailsByID not implemented")
}
func (UnimplementedFileToDBMapperServer) GetMapDetails(context.Context, *emptypb.Empty) (*GetMapDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapDetails not implemented")
}
func (UnimplementedFileToDBMapperServer) UpdateMapDetails(context.Context, *UpdateMapDetailsRequest) (*UpdateMapDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapDetails not implemented")
}
func (UnimplementedFileToDBMapperServer) EnableDisableMap(context.Context, *EnableDisableMapRequest) (*EnableDisableMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableDisableMap not implemented")
}
func (UnimplementedFileToDBMapperServer) GetPreFilledMappings(context.Context, *GetPreFilledMappingsRequest) (*GetPreFilledMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreFilledMappings not implemented")
}
func (UnimplementedFileToDBMapperServer) GetVinTemplateHeaders(context.Context, *GetVinTemplateHeadersRequest) (*GetVinTemplateHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVinTemplateHeaders not implemented")
}
func (UnimplementedFileToDBMapperServer) GetCustomerTemplateHeaders(context.Context, *GetCustomerTemplateHeadersRequest) (*GetCustomerTemplateHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerTemplateHeaders not implemented")
}
func (UnimplementedFileToDBMapperServer) AddMappingsToMap(context.Context, *AddMappingsToMapRequest) (*AddMappingsToMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMappingsToMap not implemented")
}
func (UnimplementedFileToDBMapperServer) RemoveMappingFromMap(context.Context, *RemoveMappingFromMapRequest) (*RemoveMappingFromMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMappingFromMap not implemented")
}
func (UnimplementedFileToDBMapperServer) mustEmbedUnimplementedFileToDBMapperServer() {}

// UnsafeFileToDBMapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileToDBMapperServer will
// result in compilation errors.
type UnsafeFileToDBMapperServer interface {
	mustEmbedUnimplementedFileToDBMapperServer()
}

func RegisterFileToDBMapperServer(s grpc.ServiceRegistrar, srv FileToDBMapperServer) {
	s.RegisterService(&FileToDBMapper_ServiceDesc, srv)
}

func _FileToDBMapper_CreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).CreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/CreateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).CreateMap(ctx, req.(*CreateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_GetMapDetailsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapDetailsByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).GetMapDetailsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/GetMapDetailsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).GetMapDetailsByID(ctx, req.(*GetMapDetailsByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_GetMapDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).GetMapDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/GetMapDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).GetMapDetails(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_UpdateMapDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).UpdateMapDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/UpdateMapDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).UpdateMapDetails(ctx, req.(*UpdateMapDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_EnableDisableMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableDisableMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).EnableDisableMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/EnableDisableMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).EnableDisableMap(ctx, req.(*EnableDisableMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_GetPreFilledMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreFilledMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).GetPreFilledMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/GetPreFilledMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).GetPreFilledMappings(ctx, req.(*GetPreFilledMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_GetVinTemplateHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVinTemplateHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).GetVinTemplateHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/GetVinTemplateHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).GetVinTemplateHeaders(ctx, req.(*GetVinTemplateHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_GetCustomerTemplateHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerTemplateHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).GetCustomerTemplateHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/GetCustomerTemplateHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).GetCustomerTemplateHeaders(ctx, req.(*GetCustomerTemplateHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_AddMappingsToMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMappingsToMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).AddMappingsToMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/AddMappingsToMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).AddMappingsToMap(ctx, req.(*AddMappingsToMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileToDBMapper_RemoveMappingFromMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMappingFromMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileToDBMapperServer).RemoveMappingFromMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileToDBMapper/RemoveMappingFromMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileToDBMapperServer).RemoveMappingFromMap(ctx, req.(*RemoveMappingFromMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileToDBMapper_ServiceDesc is the grpc.ServiceDesc for FileToDBMapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileToDBMapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileToDBMapper",
	HandlerType: (*FileToDBMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMap",
			Handler:    _FileToDBMapper_CreateMap_Handler,
		},
		{
			MethodName: "GetMapDetailsByID",
			Handler:    _FileToDBMapper_GetMapDetailsByID_Handler,
		},
		{
			MethodName: "GetMapDetails",
			Handler:    _FileToDBMapper_GetMapDetails_Handler,
		},
		{
			MethodName: "UpdateMapDetails",
			Handler:    _FileToDBMapper_UpdateMapDetails_Handler,
		},
		{
			MethodName: "EnableDisableMap",
			Handler:    _FileToDBMapper_EnableDisableMap_Handler,
		},
		{
			MethodName: "GetPreFilledMappings",
			Handler:    _FileToDBMapper_GetPreFilledMappings_Handler,
		},
		{
			MethodName: "GetVinTemplateHeaders",
			Handler:    _FileToDBMapper_GetVinTemplateHeaders_Handler,
		},
		{
			MethodName: "GetCustomerTemplateHeaders",
			Handler:    _FileToDBMapper_GetCustomerTemplateHeaders_Handler,
		},
		{
			MethodName: "AddMappingsToMap",
			Handler:    _FileToDBMapper_AddMappingsToMap_Handler,
		},
		{
			MethodName: "RemoveMappingFromMap",
			Handler:    _FileToDBMapper_RemoveMappingFromMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapper_service.proto",
}
